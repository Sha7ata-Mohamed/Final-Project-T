# Generated by Django 5.2 on 2025-04-30 16:52

from django.db import migrations


def update_questions(apps, schema_editor):
    """
    Update existing questions to use the new QuizCategory and QuizDifficulty models
    """
    Questions = apps.get_model('Code_Mix', 'Questions')
    QuizCategory = apps.get_model('Code_Mix', 'QuizCategory')
    QuizDifficulty = apps.get_model('Code_Mix', 'QuizDifficulty')
    
    questions = Questions.objects.all()
    
    categories = {category.name: category for category in QuizCategory.objects.all()}
    difficulties = {difficulty.level: difficulty for difficulty in QuizDifficulty.objects.all()}
    
    for question in questions:
        if question.question_category and question.question_category in categories:
            question.quiz_category = categories[question.question_category]
        
        if question.diff_level and question.diff_level in difficulties:
            question.quiz_difficulty = difficulties[question.diff_level]
            
        if question.quiz_category and question.quiz_difficulty:
            existing_count = Questions.objects.filter(
                quiz_category=question.quiz_category,
                quiz_difficulty=question.quiz_difficulty,
                question_number__isnull=False
            ).count()
            
            question.question_number = existing_count + 1
            
        question.save()


def update_user_answers(apps, schema_editor):
    """
    Update existing user answers to use the new QuizCategory and QuizDifficulty models
    """
    UserAnswer = apps.get_model('Code_Mix', 'UserAnswer')
    QuizCategory = apps.get_model('Code_Mix', 'QuizCategory')
    QuizDifficulty = apps.get_model('Code_Mix', 'QuizDifficulty')
    
    user_answers = UserAnswer.objects.all()
    
    categories = {category.name: category for category in QuizCategory.objects.all()}
    difficulties = {difficulty.level: difficulty for difficulty in QuizDifficulty.objects.all()}
    
    for user_answer in user_answers:
        if user_answer.category and user_answer.category in categories:
            user_answer.quiz_category = categories[user_answer.category]
        
        if user_answer.difficulty and user_answer.difficulty in difficulties:
            user_answer.quiz_difficulty = difficulties[user_answer.difficulty]
            
        user_answer.save()


def reverse_update(apps, schema_editor):
    """
    Reverse the update (no action needed as the original fields are preserved)
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('Code_Mix', '0017_populate_initial_categories'),
    ]

    operations = [
        migrations.RunPython(update_questions, reverse_update),
        migrations.RunPython(update_user_answers, reverse_update),
    ]
